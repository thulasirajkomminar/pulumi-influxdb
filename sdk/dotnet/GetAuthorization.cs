// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ThulasirajKomminar.InfluxDB
{
    public static class GetAuthorization
    {
        public static Task<GetAuthorizationResult> InvokeAsync(GetAuthorizationArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAuthorizationResult>("influxdb:index/getAuthorization:getAuthorization", args ?? new GetAuthorizationArgs(), options.WithDefaults());

        public static Output<GetAuthorizationResult> Invoke(GetAuthorizationInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationResult>("influxdb:index/getAuthorization:getAuthorization", args ?? new GetAuthorizationInvokeArgs(), options.WithDefaults());

        public static Output<GetAuthorizationResult> Invoke(GetAuthorizationInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAuthorizationResult>("influxdb:index/getAuthorization:getAuthorization", args ?? new GetAuthorizationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAuthorizationArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetAuthorizationArgs()
        {
        }
        public static new GetAuthorizationArgs Empty => new GetAuthorizationArgs();
    }

    public sealed class GetAuthorizationInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetAuthorizationInvokeArgs()
        {
        }
        public static new GetAuthorizationInvokeArgs Empty => new GetAuthorizationInvokeArgs();
    }


    [OutputType]
    public sealed class GetAuthorizationResult
    {
        public readonly string CreatedAt;
        public readonly string Description;
        public readonly string Id;
        public readonly string Org;
        public readonly string OrgId;
        public readonly ImmutableArray<Outputs.GetAuthorizationPermissionResult> Permissions;
        public readonly string Status;
        public readonly string Token;
        public readonly string UpdatedAt;
        public readonly string User;
        public readonly string UserId;

        [OutputConstructor]
        private GetAuthorizationResult(
            string createdAt,

            string description,

            string id,

            string org,

            string orgId,

            ImmutableArray<Outputs.GetAuthorizationPermissionResult> permissions,

            string status,

            string token,

            string updatedAt,

            string user,

            string userId)
        {
            CreatedAt = createdAt;
            Description = description;
            Id = id;
            Org = org;
            OrgId = orgId;
            Permissions = permissions;
            Status = status;
            Token = token;
            UpdatedAt = updatedAt;
            User = user;
            UserId = userId;
        }
    }
}
