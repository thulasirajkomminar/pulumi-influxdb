// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package influxdb

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/thulasirajkomminar/pulumi-influxdb/sdk/go/influxdb/internal"
)

func LookupTask(ctx *pulumi.Context, args *LookupTaskArgs, opts ...pulumi.InvokeOption) (*LookupTaskResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupTaskResult
	err := ctx.Invoke("influxdb:index/getTask:getTask", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getTask.
type LookupTaskArgs struct {
	Id string `pulumi:"id"`
}

// A collection of values returned by getTask.
type LookupTaskResult struct {
	AuthorizationId string         `pulumi:"authorizationId"`
	CreatedAt       string         `pulumi:"createdAt"`
	Cron            string         `pulumi:"cron"`
	Description     string         `pulumi:"description"`
	Every           string         `pulumi:"every"`
	Flux            string         `pulumi:"flux"`
	Id              string         `pulumi:"id"`
	Labels          []GetTaskLabel `pulumi:"labels"`
	LastRunError    string         `pulumi:"lastRunError"`
	LastRunStatus   string         `pulumi:"lastRunStatus"`
	LatestCompleted string         `pulumi:"latestCompleted"`
	Links           GetTaskLinks   `pulumi:"links"`
	Name            string         `pulumi:"name"`
	Offset          string         `pulumi:"offset"`
	Org             string         `pulumi:"org"`
	OrgId           string         `pulumi:"orgId"`
	OwnerId         string         `pulumi:"ownerId"`
	Status          string         `pulumi:"status"`
	UpdatedAt       string         `pulumi:"updatedAt"`
}

func LookupTaskOutput(ctx *pulumi.Context, args LookupTaskOutputArgs, opts ...pulumi.InvokeOption) LookupTaskResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupTaskResultOutput, error) {
			args := v.(LookupTaskArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("influxdb:index/getTask:getTask", args, LookupTaskResultOutput{}, options).(LookupTaskResultOutput), nil
		}).(LookupTaskResultOutput)
}

// A collection of arguments for invoking getTask.
type LookupTaskOutputArgs struct {
	Id pulumi.StringInput `pulumi:"id"`
}

func (LookupTaskOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskArgs)(nil)).Elem()
}

// A collection of values returned by getTask.
type LookupTaskResultOutput struct{ *pulumi.OutputState }

func (LookupTaskResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupTaskResult)(nil)).Elem()
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutput() LookupTaskResultOutput {
	return o
}

func (o LookupTaskResultOutput) ToLookupTaskResultOutputWithContext(ctx context.Context) LookupTaskResultOutput {
	return o
}

func (o LookupTaskResultOutput) AuthorizationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.AuthorizationId }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Cron() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Cron }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Every() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Every }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Flux() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Flux }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Labels() GetTaskLabelArrayOutput {
	return o.ApplyT(func(v LookupTaskResult) []GetTaskLabel { return v.Labels }).(GetTaskLabelArrayOutput)
}

func (o LookupTaskResultOutput) LastRunError() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.LastRunError }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) LastRunStatus() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.LastRunStatus }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) LatestCompleted() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.LatestCompleted }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Links() GetTaskLinksOutput {
	return o.ApplyT(func(v LookupTaskResult) GetTaskLinks { return v.Links }).(GetTaskLinksOutput)
}

func (o LookupTaskResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Offset() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Offset }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Org() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Org }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) OwnerId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.OwnerId }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupTaskResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupTaskResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupTaskResultOutput{})
}
