// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ThulasirajKomminar.InfluxDB
{
    public static class GetTask
    {
        public static Task<GetTaskResult> InvokeAsync(GetTaskArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetTaskResult>("influxdb:index/getTask:getTask", args ?? new GetTaskArgs(), options.WithDefaults());

        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("influxdb:index/getTask:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());

        public static Output<GetTaskResult> Invoke(GetTaskInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetTaskResult>("influxdb:index/getTask:getTask", args ?? new GetTaskInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetTaskArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetTaskArgs()
        {
        }
        public static new GetTaskArgs Empty => new GetTaskArgs();
    }

    public sealed class GetTaskInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetTaskInvokeArgs()
        {
        }
        public static new GetTaskInvokeArgs Empty => new GetTaskInvokeArgs();
    }


    [OutputType]
    public sealed class GetTaskResult
    {
        public readonly string AuthorizationId;
        public readonly string CreatedAt;
        public readonly string Cron;
        public readonly string Description;
        public readonly string Every;
        public readonly string Flux;
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetTaskLabelResult> Labels;
        public readonly string LastRunError;
        public readonly string LastRunStatus;
        public readonly string LatestCompleted;
        public readonly Outputs.GetTaskLinksResult Links;
        public readonly string Name;
        public readonly string Offset;
        public readonly string Org;
        public readonly string OrgId;
        public readonly string OwnerId;
        public readonly string Status;
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetTaskResult(
            string authorizationId,

            string createdAt,

            string cron,

            string description,

            string every,

            string flux,

            string id,

            ImmutableArray<Outputs.GetTaskLabelResult> labels,

            string lastRunError,

            string lastRunStatus,

            string latestCompleted,

            Outputs.GetTaskLinksResult links,

            string name,

            string offset,

            string org,

            string orgId,

            string ownerId,

            string status,

            string updatedAt)
        {
            AuthorizationId = authorizationId;
            CreatedAt = createdAt;
            Cron = cron;
            Description = description;
            Every = every;
            Flux = flux;
            Id = id;
            Labels = labels;
            LastRunError = lastRunError;
            LastRunStatus = lastRunStatus;
            LatestCompleted = latestCompleted;
            Links = links;
            Name = name;
            Offset = offset;
            Org = org;
            OrgId = orgId;
            OwnerId = ownerId;
            Status = status;
            UpdatedAt = updatedAt;
        }
    }
}
