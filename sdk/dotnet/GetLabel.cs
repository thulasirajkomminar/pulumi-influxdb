// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace ThulasirajKomminar.InfluxDB
{
    public static class GetLabel
    {
        public static Task<GetLabelResult> InvokeAsync(GetLabelArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetLabelResult>("influxdb:index/getLabel:getLabel", args ?? new GetLabelArgs(), options.WithDefaults());

        public static Output<GetLabelResult> Invoke(GetLabelInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetLabelResult>("influxdb:index/getLabel:getLabel", args ?? new GetLabelInvokeArgs(), options.WithDefaults());

        public static Output<GetLabelResult> Invoke(GetLabelInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetLabelResult>("influxdb:index/getLabel:getLabel", args ?? new GetLabelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetLabelArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        public GetLabelArgs()
        {
        }
        public static new GetLabelArgs Empty => new GetLabelArgs();
    }

    public sealed class GetLabelInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        public GetLabelInvokeArgs()
        {
        }
        public static new GetLabelInvokeArgs Empty => new GetLabelInvokeArgs();
    }


    [OutputType]
    public sealed class GetLabelResult
    {
        public readonly string Id;
        public readonly string Name;
        public readonly string OrgId;
        public readonly ImmutableDictionary<string, string> Properties;

        [OutputConstructor]
        private GetLabelResult(
            string id,

            string name,

            string orgId,

            ImmutableDictionary<string, string> properties)
        {
            Id = id;
            Name = name;
            OrgId = orgId;
            Properties = properties;
        }
    }
}
